using System;
using System.Collections.Generic;


namespace LinerForCSharp
{
    class Program
    {

        public static void Print(object t) => Console.WriteLine(t);

        static void Main(string[] args)
        {
            var vec = new Vector(new List<double>() { 4, 32, 13 });
            var vec2 = new Vector(new List<double>() { 3, 1, 4 });
            var vec3 = new Vector(new List<double>() { 3, 1, 4 });
            //向量
            vec.Getitem(0, 100);
            vec2.ChangeVec(new List<double>() { 111, 22, 2222 });
            Print(vec + vec2 - vec3);
            Print(vec[0]);


            //矩阵
            var mat = new List<List<double>>() { };
            mat.Add(new List<double>() { 3, 1, -2 });
            mat.Add(new List<double>() { 5, -3, 10 });
            mat.Add(new List<double>() { 7, 4, 16 });

            var mat2 = new List<List<double>>() { };
            mat2.Add(new List<double>() { 1, 2, 1 });
            mat2.Add(new List<double>() { 1, 1, 2 });
            mat2.Add(new List<double>() { 2, 1, 1 });

            var Mat = new Matrix(mat);
            var Mat2 = new Matrix(mat2);
            Print(Mat + Mat2);
            Print(Mat.row_vector(0));
            Print(Mat.col_vector(0));
            Print(Mat.Getitem(0, 0));
            Print(Mat);
            Print(Mat.T());
            Print(Mat.shape());
            Print(Mat.dot(vec));

            Mat[0] = vec;
            Print(Mat[0]);
            Print(Mat["col", 0]);
            Print(Mat[0, 1]);

            //LU
            var luMat = new LU(Mat);
            luMat.decomposition();
            var (L, U) = luMat.DStruct();
            Print(L);
            Print(U);

            //LinearSystem
            var lin = new LinearSystem(Mat, vec);
            lin.gauss_jordan_elimination();
            lin.fancy_print();
            var lin2 = new LinearSystem(Mat2, Matrix.identity(3));
            Print(lin2.inv()); ;

            //gram_schmidt_process
            var basis1 = new List<List<double>>()
               {
                   new List<double>(){2,1},
                   new List<double>(){1,1}
             };
            var res1 = new gram_schmidt_process(basis1);
            Print(res1.res_Matrix);

            //qr
            var (q, r) = res1.qr();
            Print(q);
            Print(r);
            Print(q.dot(r));


        }
    }
}
