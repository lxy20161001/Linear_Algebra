//
// Created by john on 2018-8-1.
//

#ifndef LINEARALGEBRA2_MINMATRIX_H
#define LINEARALGEBRA2_MINMATRIX_H

#include "MinVector.h"
#include <iostream>
#include <cassert>
#include <vector>
#include <tuple>

using namespace std;

template<typename A>
class MinMatrix{
private:
    vector<vector<A>> vec;

public:
    MinMatrix(vector<vector<A>> vec) : vec(vec) {

    }

    MinMatrix() {
        vec = {};
    }

    A getitem(vector<int> pos) {
        int r = pos[0];
        int c = pos[1];
        return vec[r][c];
    }

    MinMatrix<A> zero(unsigned r, unsigned c) {
        vector<vector<A>> newVec(r);
        for (int i = 0; i < r; i++) {
            newVec[i] = vector<double>(c);
        }
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                newVec[i][j] = 0.0;
            }
        }
        return MinMatrix<A>(newVec);
    }


    MinVector<A> row_vector(int index) {
        return MinVector<A>(vec[index]);
    }

    MinVector<A> col_vector(int index) {
        vector<A> newVec;
        for (int i = 0; i < vec.size(); i++) {
            newVec.push_back(vec[i][index]);
        }
        return MinVector<A>(newVec);
    }

    int size() {
        return vec.size();
    }


    int row_num() {
        return this->shape().len();
    }

    int col_num() {
        return this->vec[0].size();
    }

    MinVector<int> shape() {

        int r = vec.size();
        int c = col_vector(0).len();
        return MinVector<int>({r, c});
    }


    MinMatrix<A> add(MinMatrix<A> matrix) {
        assert(this->size() == matrix.size());
        vector<vector<A>> newVec(matrix.size());
        for (int i = 0; i < matrix.size(); i++) {
            newVec[i] = vector<double>(matrix.row_vector(0).len());
        }
        for (int i = 0; i < matrix.size(); i++) {
            for (int j = 0; j < matrix.row_vector(0).len(); j++) {
                newVec[i][j] = this->getitem({i,j}) + matrix.getitem({i,j});
            }
        }
        return MinMatrix<A>(newVec);

    }

    MinMatrix<A> operator+(MinMatrix<A> &matrix) {
        assert(this->size() == matrix.size());
        vector<vector<A>> newVec(matrix.size());
        for (int i = 0; i < matrix.size(); i++) {
            newVec[i] = vector<double>(matrix.row_vector(0).len());
        }
        for (int i = 0; i < matrix.size(); i++) {
            for (int j = 0; j < matrix.row_vector(0).len(); j++) {
                newVec[i][j] = this->getitem({i,j}) + matrix.getitem({i,j});
            }
        }
        return MinMatrix<A>(newVec);
    }


    MinMatrix<A> sub(MinMatrix<A> matrix) {
        assert(this->size() == matrix.size());
        vector<vector<A>> newVec(matrix.size());
        for (int i = 0; i < matrix.size(); i++) {
            newVec[i] = vector<double>(matrix.row_vector(0).len());
        }
        for (int i = 0; i < matrix.size(); i++) {
            for (int j = 0; j < matrix.row_vector(0).len(); j++) {
                newVec[i][j] = this->getitem({i,j}) - matrix.getitem({i,j});
            }
        }
        return MinMatrix<A>(newVec);

    }

    MinMatrix<A> operator-(MinMatrix<A> &matrix) {
        assert(this->size() == matrix.size());
        vector<vector<A>> newVec(matrix.size());
        for (int i = 0; i < matrix.size(); i++) {
            newVec[i] = vector<double>(matrix.row_vector(0).len());
        }
        for (int i = 0; i < matrix.size(); i++) {
            for (int j = 0; j < matrix.row_vector(0).len(); j++) {
                newVec[i][j] = this->getitem({i,j}) - matrix.getitem({i,j});
            }
        }
        return MinMatrix<A>(newVec);
    }

    MinMatrix<A> mul(A k) {

        vector<vector<A>> newVec(static_cast<unsigned int>(this->size()));
        for (int i = 0; i < this->size(); i++) {
            newVec[i] = vector<double>(this->row_vector(0).len());
        }
        for (int i = 0; i < this->size(); i++) {
            for (int j = 0; j < this->row_vector(0).len(); j++) {
                newVec[i][j] = this->getitem({i,j}) * k;
            }
        }
        return MinMatrix<A>(newVec);

    }

    MinMatrix<A> operator*(A k) {
        vector<vector<A>> newVec(static_cast<unsigned int>(this->size()));
        for (int i = 0; i < this->size(); i++) {
            newVec[i] = vector<double>(this->row_vector(0).len());
        }
        for (int i = 0; i < this->size(); i++) {
            for (int j = 0; j < this->row_vector(0).len(); j++) {
                newVec[i][j] = this->getitem({i,j}) * k;
            }
        }
        return MinMatrix<A>(newVec);
    }

    MinMatrix<A> rmul(A k) {

        vector<vector<A>> newVec(static_cast<unsigned int>(this->size()));
        for (int i = 0; i < this->size(); i++) {
            newVec[i] = vector<double>(this->row_vector(0).len());
        }
        for (int i = 0; i < this->size(); i++) {
            for (int j = 0; j < this->row_vector(0).len(); j++) {
                newVec[i][j] = k * this->getitem({i,j});
            }
        }
        return MinMatrix<A>(newVec);

    }

    friend MinMatrix<A> operator*(A k, MinMatrix<A> &r) {
        vector<vector<A>> newVec(static_cast<unsigned int>(r.size()));
        for (int i = 0; i < r.size(); i++) {
            newVec[i] = vector<double>(r.row_vector(0).len());
        }
        for (int i = 0; i < r.size(); i++) {
            for (int j = 0; j < r.row_vector(0).len(); j++) {
                newVec[i][j] = r.getitem({i,j}) * k;
            }
        }
        return MinMatrix<A>(newVec);
    }

    MinMatrix<A> trueDiv(A k) {

        vector<vector<A>> newVec(static_cast<unsigned int>(this->size()));
        for (int i = 0; i < this->size(); i++) {
            newVec[i] = vector<double>(this->row_vector(0).len());
        }
        for (int i = 0; i < this->size(); i++) {
            for (int j = 0; j < this->row_vector(0).len(); j++) {
                newVec[i][j] = 1 / k * this->getitem({i,j});
            }
        }
        return MinMatrix<A>(newVec);

    }

    MinMatrix<A> operator/(A k) {
        vector<vector<A>> newVec(static_cast<unsigned int>(this->size()));
        for (int i = 0; i < this->size(); i++) {
            newVec[i] = vector<double>(this->row_vector(0).len());
        }
        for (int i = 0; i < this->size(); i++) {
            for (int j = 0; j < this->row_vector(0).len(); j++) {
                newVec[i][j] = 1 / k * this->getitem({i,j});
            }
        }
        return MinMatrix<A>(newVec);
    }

    MinMatrix<A> pos() {

        vector<vector<A>> newVec(static_cast<unsigned int>(this->size()));
        for (int i = 0; i < this->size(); i++) {
            newVec[i] = vector<double>(this->row_vector(0).len());
        }
        for (int i = 0; i < this->size(); i++) {
            for (int j = 0; j < this->row_vector(0).len(); j++) {
                newVec[i][j] = 1 * this->getitem({i,j});
            }
        }
        return MinMatrix<A>(newVec);

    }

    MinMatrix<A> neg() {

        vector<vector<A>> newVec(static_cast<unsigned int>(this->size()));
        for (int i = 0; i < this->size(); i++) {
            newVec[i] = vector<double>(this->row_vector(0).len());
        }
        for (int i = 0; i < this->size(); i++) {
            for (int j = 0; j < this->row_vector(0).len(); j++) {
                newVec[i][j] = -1 * this->getitem({i,j});
            }
        }
        return MinMatrix<A>(newVec);

    }

    friend ostream &operator<<(ostream &out, MinMatrix<A> matrix) {

        out << "Matrix : (";
        for (int i = 0; i < matrix.size(); i++) {
            if (i != matrix.size() - 1) {
                out << matrix.row_vector(i) << ',';
            } else {
                out << matrix.row_vector(i);
            }
        }

        out << ")";
        return out;
    }


    MinVector<A> operator[](int k) {
        assert(k<vec.size() && k>=0);

        return MinVector<A>(this->row_vector(k));
    }

    MinMatrix<A> dot(MinMatrix<A> &a){
            assert(col_num() == a.row_num());
            vector<vector<A>> newVec;
            for(int i = 0; i< col_num();i++){
                newVec.push_back(vector<double>());
            }
            for(int i = 0; i < row_num();i++){
                for(int j = 0; j < a.col_num();j++){
                    newVec[i].push_back(row_vector(i).dot(a.col_vector(j)));
                }
            }
            return MinMatrix(newVec);
    }

    MinVector<A> dot(MinVector<A> a){
        assert(col_num() == a.len());
        vector<double> vecTemp;
        for(int i = 0; i < col_num();i++){
            vecTemp.push_back(row_vector(i).dot(a));
        }
        return MinVector<A>(vecTemp);
    }

    MinMatrix<A> T(){

        vector<vector<A>> newVec;
        for(int i = 0; i< col_num();i++){
            newVec.push_back(vector<double>());
        }
        for(int i = 0; i < this[0].size();i++){
            for(int j = 0; j < col_num();j++){
                newVec[i].push_back(col_vector(i)[j]);
            }
        }
        return MinMatrix(newVec);
    }


};

#endif //LINEARALGEBRA2_MINMATRIX_H
