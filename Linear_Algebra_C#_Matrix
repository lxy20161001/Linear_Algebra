using System.Collections.Generic;
using System.Text;
using System.Diagnostics;

class Matrix
{
    public List<List<double>> _values;

    public Matrix()
    {
        this._values = new List<List<double>>();
    }
    public Matrix(List<List<double>> list2d)
    {
        this._values = list2d;
    }
    public static Matrix identity(int n)
    {
        var list = new List<List<double>>();
           for(int i = 0; i < n; ++i)
        {
            list.Add(new List<double>());
            for(int j = 0; j < n; ++j)
            {
                list[i].Add(0);
                if (i == j)
                {
                    list[i][j] = 1;
                }
            }
        }
        return new Matrix(list);
    }

    public System.Collections.Generic.IEnumerator<Vector> GetEnumerator()
    {
        foreach (var i in this._values)
        {
            yield return new Vector(i);
        }
    }

    private static  System.Collections.Generic.IEnumerable<int> Range(int n)
    {
        for(int i = 0; i < n; i++)
        {
            yield return i;
        }
    }

    private static System.Collections.Generic.IEnumerable<int> Range(int start,int end)
    {
        for (int i = start; i < end; i++)
        {
            yield return i;
        }
    }

    private static System.Collections.Generic.IEnumerable<int> Range(int start, int end,int step)
    {
        for (int i = start; i < end; i=i+step)
        {
            yield return i;
        }
    }

    public static Matrix zero(int r,int c)
    {
        var zeroMat = new List<List<double>>() ;
        for(int i = 0; i < r; ++i)
        {
            zeroMat.Add(new List<double>(c) );
            for(int j = 0; j < c; j++)
            {
                zeroMat[i].Add(0);
            }
        }
        return new Matrix(zeroMat);
    }

    public  int row_num()
    {
        return this._values.Count;
    }

    public int col_num()
    {
        return this._values[0].Count;
    }

    public int size()
    {
        return this.row_num() * this.col_num();
    }

    public Vector shape()
    {
        return new Vector(new List<double>() { this.row_num(), this.col_num() });
    }

    public override string ToString()
    {
        StringBuilder a = new StringBuilder("Matrix: { \n");
        foreach (var item in _values)
        {
            a.Append(new Vector(item).ToString());
        }
        a.Append("} \n");
        return a.ToString();
    } 

    public Matrix T()
    {
        var TMat = new Matrix();
        foreach(var  i in Range(this.col_num()))
        {
            TMat.MatrixAppend(this.col_vector(i));
        }
        return TMat;
    }

    public Vector row_vector(int index)
    {
        return new Vector(this._values[index]);
    }

    public Vector col_vector(int index)
    {
        List<double> temp = new List<double>();
        foreach(var i in this._values)
        {
            temp.Add(i[index]);
        }
        return new Vector(temp);
    }

    public double Getitem(int r,int c)
    {
        return this._values[r][c];
    }

    public void MatrixAppend(Vector vec)
    {
        this._values.Add(vec._values);
    }

    public void MatrixAppend(List<double>vec)
    {
        this._values.Add(vec);
    }

    public  static Matrix operator + (Matrix mat1,Matrix mat2)
    {
        int number = mat1._values.Count;
        var temp = new Matrix();
        foreach(var index in Range(0, number))
        {
            temp.MatrixAppend(mat1.row_vector(index) + mat2.row_vector(index));
        }
        return temp;
    }

    public static Matrix operator -(Matrix mat1, Matrix mat2)
    {
        int number = mat1._values.Count;
        var temp = new Matrix();
        foreach (var index in Range(0, number))
        {
            temp.MatrixAppend(mat1.row_vector(index) - mat2.row_vector(index));
        }
        return temp;
    }

    public static Matrix operator * (Matrix mat1, double ele)
    {
        int number = mat1._values.Count;
        var temp = new Matrix();
        foreach (var index in Range(0, number))
        {
            temp.MatrixAppend(mat1.row_vector(index) * ele);
        }
        return temp;
    }

    public static Matrix operator * (double ele, Matrix mat1 )
    {
        int number = mat1._values.Count;
        var temp = new Matrix();
        foreach (var index in Range(0, number))
        {
            temp.MatrixAppend(mat1.row_vector(index) * ele);
        }
        return temp;
    }

    public static Matrix operator /(Matrix mat1, double ele)
    {
        int number = mat1._values.Count;
        var temp = new Matrix();
        foreach (var index in Range(0, number))
        {
            temp.MatrixAppend(mat1.row_vector(index) * (1/ele));
        }
        return temp;
    }

    public Matrix pos()
    {
        return this * 1;
    }

    public Matrix neg()
    {
        return this * (-1);
    }

    public Vector dot(Vector another)
    {
        List<double> newVec = new List<double>();
        foreach(var i in Range(0, this.row_num()))
        {
            newVec.Add(this.row_vector(i).dot(another));
        }
        return new Vector(newVec);
    }

    public Matrix dot(Matrix another)
    {
        Matrix newMat = new Matrix();
        foreach(var i in Range(0, this.row_num()))
        {
            var list = new List<double>();
            foreach (var j in Range(0, another.col_num()))
            {
                list.Add(this.row_vector(i).dot(another.col_vector(j)));   
            }
            newMat.MatrixAppend(list);
        }
        return newMat;
    }
}
