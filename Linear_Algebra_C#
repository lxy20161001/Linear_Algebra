using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.Remoting.Messaging;
using System.Security;


namespace ConsoleApplication1
{
    public class PlayLA 
    {
        public List<Double>_value;
        private const double EPSILON = 1e-8;
        public PlayLA(List<Double> lst)
        {
            this._value = lst;
        }

        public int LstSize()
        {
            return _value.Count;
        }

        public double getItem(int item)
        {
            return this._value[item];
        }

        public string toString()
        {
            string str = "";
            for (int i = 0; i < this._value.Count; i++)
            {
                if (i != this._value.Count-1)
                {
                    str += this._value[i].ToString() + ",";
                }
                else
                {
                    str += this._value[i].ToString();
                }
            }

            return str;
        }
        
        public string toString(List<double> lst)
        {
            string str = "";
            for (int i = 0; i < lst.Count; i++)
            {
                if (i != lst.Count-1)
                {
                    str += lst[i].ToString() + ",";
                }
                else
                {
                    str += lst[i].ToString();
                }
            }

            return str;
        }
        

        public PlayLA add(List<Double> another)
        {
            Debug.Assert(_value.Count == another.Count);
            List<Double> newList = new List<Double>();
            for (int i = 0; i < another.Count; i++)
            {
                newList.Add(_value[i]+another[i]);
            }

            return new PlayLA(newList);

        }
        
        public PlayLA sub(List<Double> another)
        {
            Debug.Assert(_value.Count == another.Count);
            List<Double> newList = new List<Double>();
            for (int i = 0; i < another.Count; i++)
            {
                newList.Add(_value[i]-another[i]);
            }

            return new PlayLA(newList);

        }
        
        public PlayLA mul(double k)
        {
            
            List<Double> newList = new List<Double>();
            for (int i = 0; i < _value.Count; i++)
            {
                newList.Add(_value[i]*k);
            }

            return new PlayLA(newList);

        }
        
        public PlayLA rmul(double k)
        {
            
            List<Double> newList = new List<Double>();
            for (int i = 0; i < _value.Count; i++)
            {
                newList.Add(k*_value[i]);
            }

            return new PlayLA(newList);

        }
        
        public double dot(List<Double> another)
        {
            Debug.Assert(_value.Count == another.Count);
            double newnum = 0;
            for (int i = 0; i < another.Count; i++)
            {
                newnum+=(_value[i]*another[i]);
            }

            return newnum;

        }
        
        
        public PlayLA div(double k)
        {
            
            List<Double> newList = new List<Double>();
            for (int i = 0; i < _value.Count; i++)
            {
                newList.Add((1/k)*_value[i]);
            }

            return new PlayLA(newList);

        }
        
        public PlayLA pos(double k)
        {
            
            List<Double> newList = new List<Double>();
            for (int i = 0; i < _value.Count; i++)
            {
                newList.Add(1*_value[i]);
            }

            return new PlayLA(newList);

        }
        
        public PlayLA neg(double k)
        {
            
            List<Double> newList = new List<Double>();
            for (int i = 0; i < _value.Count; i++)
            {
                newList.Add(-1*_value[i]);
            }

            return new PlayLA(newList);

        }

        public double norm()
        {
            double ret = 0;
            for(int i = 0; i < this._value.Count;i++){
                ret=ret+Math.Pow(this._value[i],2);
            }

            return Math.Sqrt(ret);
        }
        
        public double norm(List<double> _value)
        {
            double ret = 0;
            for(int i = 0; i < _value.Count;i++){
                ret=ret+Math.Pow(_value[i],2);
            }

            return Math.Sqrt(ret);
        }
        
        public double norm(PlayLA _value)
        {
            double ret = 0;
            for(int i = 0; i < _value._value.Count;i++){
                ret=ret+Math.Pow(_value._value[i],2);
            }

            return Math.Sqrt(ret);
        }
        
        PlayLA nomalize(){
            Debug.Assert(this.norm()>EPSILON);
            List<double> newVec = new List<double>();
            for(int i = 0; i < this._value.Count;i++){

                newVec.Add(1/this.norm()*this._value[i]);
            }

            return new PlayLA(newVec);
        }

        PlayLA nomalize(List<double> zero){
            Debug.Assert(this.norm(zero)<EPSILON);
             
            List<double> newVec = new List<double>();
            for(int i = 0; i < this._value.Count;i++){

                newVec.Add(1/this.norm()*this._value[i]);
            }

            return new PlayLA(newVec);
        }
        
        PlayLA ones( int dim){
            List<double> newVec = new List<double>();
            for(int i =0;i < dim;i++){
                newVec.Add(1);
            }

            return  new PlayLA(newVec);
        }
        
        PlayLA zero( int dim){
            List<double> newVec = new List<double>();
            for(int i =0;i < dim;i++){
                newVec.Add(0);
            }

            return  new PlayLA(newVec);
        }
        
        PlayLA full( int dim,double num){
            List<double> newVec = new List<double>();
            for(int i =0;i < dim;i++){
                newVec.Add(num);
            }

            return  new PlayLA(newVec);
        }
        
        PlayLA listSub( List<double> lst,int first,double last){
            List<double> newVec = new List<double>();
            for(int i =first;i < last;i++){
                newVec.Add(lst[i]);
            }

            return  new PlayLA(newVec);
        }

        
        

        
        

        

       
    }
}
